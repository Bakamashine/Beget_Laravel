// Инцилизация кнопок
const next = document.getElementById("next");
const back = document.getElementById("back");

// Инцилизация родительского section
const slider = document.getElementById("slider");

// Инцилизация родительского div
const sliderLine = document.getElementById("sliderline");

// Инцилизация всех картинок по атрибуту data_carousel
const img = document.querySelectorAll("img[data_carousel]")

// Инцилизация длины и ширины слайдера
let width, height;

// Инцилизация счётчика (подчсёт активной картинки)
let count = 0;

/**
  * Используется для подсчёта длины и ширины слайдера
  */
function init() {
  // Получение длины
  width = slider.offsetWidth;

  // Получение ширины
  height = slider.offsetHeight;

}

// Использование init
init();

// При смене размера окна, идёт пересчёт переменных
window.addEventListener("resize", init);

// Добавление события на кнопку "Дальше"
next.addEventListener('click', function() {

  // При нажатии на кнопку идёт увелечение счётчика на единицу,
  // тем самым, мы можем получать счёт какой картинки был загружен.
  // Конечно же, его можно было получать с помощью заранее заданного специального атрибута,
  // но так проще добавлять различные картинки
  count++;

  // Если счётчик равен или вдруг больше кол-ва картинок,
  // то счётчик обнуляется и возвращается первая картинка
  if (count >= img.length) {
    count = 0;
  }

  // Использование метода для двигания картинок
  rollSlider();
})

// Добавление события на кнопку "Назад"
back.addEventListener("click", function() {

  // Тут почти тоже самое что и с кнопкой "Дальше",
  // но идёт уменьшение, ведь это кнопка "Назад"
  count--;

  // Если счётчик опустился ниже нуля, то идёт возврат на последнюю картинку
  if (count < 0) {
    count = img.length - 1;
  }

  // Использование метода для двигания картинок
  rollSlider();
})

/**
  * Передвежение картинок осуществляется с помощью css метода transform,
  * в интернете есть множество способов перемещать картинки.
  * Один из них был при помощи сложения и вычитания размера страницы,
  * но мне он не понравился из-за сильной привязанности к размерам.
  * Этот метод мне показался  наиболее эффективным, так как позволяет
  * избежать лишних вычислений
  *
  * Суть заключается в том, что при умножении числа активной картинки (count)
  * на длину слайдера (width), мы собственно получаем значение на которое необходимо сдвинуть картинку,
  * тут в дело и вступает transform с translate которое это и осуществляет
  */
function rollSlider() {
  sliderLine.style.transform = 'translate(-' + count * width + 'px)';
}
